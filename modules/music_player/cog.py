from botbase import BotBase

from .player import VoiceSessionHandler, QueueInterface, TRACK_LOAD_FAILED, LoopMode
from .checker import is_player_member, is_voice_connectable

import disnake
from disnake.ext import commands
import logging
import json
from random import choices

from mafic import Track, Playlist, TrackEndEvent, NodePool
from mafic.events import EndReason
from utils.converter import time_format, trim_text


class Music(commands.Cog):
	def __init__(self, bot: BotBase):
		self.bot: BotBase = bot
		self.logger: logging.Logger = logging.getLogger(__name__)
		self.session_id = "".join(choices("abcdefghijklmnopqrstuvwxyz0123456789", k=16))

		self.pool = NodePool(self.bot)
		self.bot.loop.create_task(self.load_node())

	async def load_node(self):
		with open("modules/music_player/node.json", 'r') as config:
			data: list = json.loads(config.read())

		for node in data:
			try:
				await self.pool.create_node(
					host=node['host'],
					port=node['port'],
					password=node['password'],
					label=node['label'],
					resuming_session_id=self.session_id
				)
			except Exception as e:
				self.logger.error(f"ƒê√£ x·∫£y ra s·ª± c·ªë khi k·∫øt n·ªëi ƒë·∫øn lavalink {node['host']}: {e}")


	@commands.cooldown(1, 5, commands.BucketType.guild)
	@commands.slash_command(
		name="play",
		description="Ph√°t m·ªôt b√†i h√°t tr√™n k√™nh c·ªßa b·∫°n",
		options=[
			disnake.Option(
				name="search",
				description="T√™n ho·∫∑c link b√†i h√°t",
				required=True,
				max_length=100,
				type=disnake.OptionType.string
			)
		]
	)
	@commands.guild_only()
	@is_voice_connectable
	async def play(self, inter: disnake.ApplicationCommandInteraction, search: str):
		await inter.response.defer()

		player: VoiceSessionHandler = inter.author.guild.voice_client
		begined = True

		if player is None:
			player: VoiceSessionHandler = await inter.author.voice.channel.connect(cls=VoiceSessionHandler)
			begined = False

		player.notification_channel = inter.channel

		try:
			result = await player.fetch_tracks(search)
			if isinstance(result, Playlist):
				total_time = 0
				for track in result.tracks:
					player.queue.add(track)
					if not track.stream: total_time += track.length

				thumbnail_track = result.tracks[0]
				embed = disnake.Embed(
					title=trim_text("[Playlist] " + thumbnail_track.title, 32),
					url=thumbnail_track.uri,
					color=0xFFFFFF
				)
				embed.description = f"``{thumbnail_track.source.capitalize()} | {result.tracks.__len__()} b√†i h√°t | {time_format(total_time)}`"
				embed.set_thumbnail(result.tracks[0].artwork_url)

			elif isinstance(result, list):
				track: Track = result[0]
				player.queue.add(track)
				embed = disnake.Embed(
					title=trim_text(track.title, 32),
					url=track.uri,
					color=0xFFFFFF
				)
				embed.description = f"`{track.source.capitalize()} | {track.author}"
				if track.stream:
					embed.description += " | üî¥ LIVESTREAM`"
				else:
					embed.description += f" | {time_format(track.length)}`"
				embed.set_thumbnail(track.artwork_url)
			else:
				embed = TRACK_LOAD_FAILED
		except:
			embed = TRACK_LOAD_FAILED
			self.logger.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm b√†i h√°t: {search} (ID m√°y ch·ªß: {inter.guild_id})")
		await inter.edit_original_response(embed=embed)

		if not begined:
			await player._continue()
		else:
			await player.update_controller()

	@commands.cooldown(1, 10, commands.BucketType.guild)
	@commands.slash_command(name="stop", description="D·ª´ng ph√°t nh·∫°c")
	@commands.guild_only()
	@is_player_member
	async def stop(self, inter: disnake.ApplicationCommandInteraction, player: VoiceSessionHandler):
		await inter.response.defer()
		player.notification_channel = inter.channel
		await player.disconnect(force=True)
		await inter.edit_original_response(
			embed=disnake.Embed(
				title="‚èπÔ∏è ƒê√£ d·ª´ng ph√°t nh·∫°c",
				color=0x00FFFF
			)
		)

	@commands.cooldown(3, 10, commands.BucketType.guild)
	@commands.slash_command(name="pause", description="T·∫°m d·ª´ng b√†i h√°t")
	@commands.guild_only()
	@is_player_member
	async def pause(self, inter: disnake.ApplicationCommandInteraction, player: VoiceSessionHandler):
		await inter.response.defer()
		player.notification_channel = inter.channel
		if player.paused:
			await player.resume()
			await inter.edit_original_response("ƒê√£ ti·∫øp t·ª•c ph√°t")
		else:
			await player.pause()
			await inter.edit_original_response(f"ƒê√£ t·∫°m d·ª´ng b√†i h√°t")
		await player.update_controller()


	@commands.cooldown(3, 10, commands.BucketType.guild)
	@commands.slash_command(name="next", description="Ph√°t b√†i h√°t ti·∫øp theo")
	@commands.guild_only()
	@is_player_member
	async def next(self, inter: disnake.ApplicationCommandInteraction, player: VoiceSessionHandler):
		await inter.response.defer()
		player.notification_channel = inter.channel
		await player.next()
		await inter.edit_original_response(
			embed=disnake.Embed(
				title="‚è≠Ô∏è ƒê√£ chuy·ªÉn sang b√†i h√°t ti·∫øp theo",
				color=0x00FFFF
			)
		)


	@commands.cooldown(3, 10, commands.BucketType.guild)
	@commands.slash_command(name="prev", description="Ph√°t l·∫°i b√†i h√°t tr∆∞·ªõc ƒë√≥")
	@is_player_member
	async def prev(self, inter: disnake.ApplicationCommandInteraction, player: VoiceSessionHandler):
		await inter.response.defer()
		player.notification_channel = inter.channel
		result = await player.previous()
		if result:
			await inter.edit_original_response(
				embed=disnake.Embed(
					title="‚èÆÔ∏è ƒê√£ quay l·∫°i b√†i h√°t tr∆∞·ªõc ƒë√≥",
					color=0x00FFFF
				)
			)
		else:
			await inter.edit_original_response(
				embed=disnake.Embed(
					title="‚ö†Ô∏è Kh√¥ng c√≥ b√†i h√°t n√†o ƒë√£ ph√°t tr∆∞·ªõc ƒë√≥",
					color=0xFFFF00
				)
			)



	@commands.slash_command(name="queue", dm_permission=False)
	async def queue(self, inter):
		pass


	@queue.sub_command(
		name="loop",
		description="Ph√°t li√™n t·ª•c b√†i h√°t hi·ªán t·∫°i ho·∫∑c to√†n b·ªô danh s√°ch ph√°t",
		options=[
			disnake.Option(
				name="mode",
				description="Ch·∫ø ƒë·ªô",
				type=disnake.OptionType.integer,
				choices=[
					disnake.OptionChoice(name="T·∫Øt", value=LoopMode.OFF),
					disnake.OptionChoice(name="B√†i h√°t hi·ªán t·∫°i", value=LoopMode.SONG),
					disnake.OptionChoice(name="To√†n b·ªô danh s√°ch ph√°t", value=LoopMode.PLAYLIST)
				],
				min_value=0,
				max_length=0,
				required=True
			)
		]
	)
	@is_player_member
	async def loop_mode(self, inter: disnake.ApplicationCommandInteraction, player: VoiceSessionHandler, mode = LoopMode.OFF):
		if mode not in (LoopMode.OFF, LoopMode.SONG, LoopMode.PLAYLIST):
			await inter.send(embed=disnake.Embed(
				title="‚ùå Gi√° tr·ªã nh·∫≠p v√†o kh√¥ng h·ª£p l·ªá",
				color=0xFF0000
			))
			return
		player.queue.loop = mode
		await inter.send(embed=disnake.Embed(
			title="‚úÖ ƒê√£ thay ƒë·ªïi ch·∫ø ƒë·ªô ph√°t li√™n t·ª•c",
			color=0x00FF00
		))
		await player.update_controller()

	@queue.sub_command(name="shuffle", description="B·∫≠t (t·∫Øt) ch·∫ø ƒë·ªô ph√°t ng·∫´u nhi√™n b√†i h√°t trong h√†ng ch·ªù")
	@is_player_member
	async def loop_mode(self, inter: disnake.ApplicationCommandInteraction, player: VoiceSessionHandler):
		player.queue.shuffle = not player.queue.shuffle
		await inter.send(embed=disnake.Embed(
			title="‚úÖ ƒê√£ thay ƒë·ªïi ch·∫ø ƒë·ªô ph√°t ng·∫´u nhi√™n",
			color=0x00FF00
		))
		await player.update_controller()


	@commands.cooldown(1, 20, commands.BucketType.guild)
	@queue.sub_command(name="show", description="Hi·ªÉn th·ªã danh s√°ch ch·ªù")
	@is_player_member
	async def show_queue(self, inter: disnake.ApplicationCommandInteraction, player: VoiceSessionHandler):
		await inter.response.defer()
		if not player.queue.upcoming:
			return await inter.edit_original_response("Kh√¥ng c√≥ b√†i h√°t trong h√†ng ƒë·ª£i")

		view = QueueInterface(player=player)
		embed = view.embed

		kwargs = {
			"embed": embed,
			"view": view
		}
		try:
			func = inter.followup.send
			kwargs["ephemeral"] = True
		except AttributeError:
			func = inter.send
			kwargs["ephemeral"] = True

		view.message = await func(**kwargs)

		await view.wait()

	@commands.cooldown(1, 20, commands.BucketType.guild)
	@queue.sub_command(name="clear", description="Xo√° danh s√°ch ch·ªù")
	@is_player_member
	async def clear_queue(self, inter: disnake.ApplicationCommandInteraction, player: VoiceSessionHandler):
		player.queue.clear()
		await inter.send(embed=disnake.Embed(
			title="‚úÖ ƒê√£ xo√° t·∫•t c·∫£ b√†i h√°t trong danh s√°ch ch·ªù",
			color=0x00FF00
		))
		await player.update_controller()


	@commands.Cog.listener()
	async def on_track_end(self, event: TrackEndEvent[VoiceSessionHandler]):
		player = event.player
		reason = event.reason
		if reason == EndReason.FINISHED:
			await player._continue()
		elif reason == EndReason.LOAD_FAILED:
			await player.notification_channel.send(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫£i b√†i h√°t {player.queue.current_track.title}")
			self.logger.warning(f"T·∫£i b√†i h√°t ƒë∆∞·ª£c y√™u c·∫ßu ·ªü m√°y ch·ªß {player.guild.id} th·∫•t b·∫°i")
			await player.next()


	@commands.Cog.listener()
	async def on_button_click(self, inter: disnake.MessageInteraction):
		if inter.guild_id is None:
			return
		if not isinstance(inter.component, disnake.Button):
			return
		button_id = inter.component.custom_id
		if not button_id.startswith("music_"):
			return

		player: VoiceSessionHandler = inter.author.guild.voice_client

		if not player:
			await inter.send(
				embed=disnake.Embed(
					title="‚ö†Ô∏è Hi·ªán t·∫°i bot kh√¥ng ph√°t nh·∫°c tr√™n m√°y ch·ªß",
					color=0xFFFF00
				),
				ephemeral=True
			)
			return

		if not (inter.author.voice and inter.author.id in inter.guild.me.voice.channel.voice_states):
			await inter.send(
				embed=disnake.Embed(
					title="‚ö†Ô∏è B·∫°n h√£y v√†o k√™nh bot ƒëang ph√°t nh·∫°c ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y nh√©",
					color=0xFFFF00
				),
				ephemeral=True
			)
			return

		if button_id == "music_previous":
			if not await player.previous():
				await inter.send(
					embed=disnake.Embed(
						title="‚ö†Ô∏è Kh√¥ng c√≥ b√†i h√°t n√†o ƒë√£ ph√°t tr∆∞·ªõc ƒë√≥",
						color=0xFFFF00
					),
					ephemeral=True
				)

		elif button_id == "music_pause":
			if player.paused:
				await player.resume()
			else:
				await player.pause()

		elif button_id == "music_next":
			await player.next()

		elif button_id == "music_stop":
			await player.disconnect(force=True)

		else:
			return

		if button_id != "music_stop":
			await player.update_controller()